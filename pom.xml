<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>io.github.yan624</groupId>
    <artifactId>yan-simple-project</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>yan-simple-project</name>
    <description>a simple project for rapid development</description>

    <properties>
        <java.version>1.8</java.version>
        <shiro-spring>1.4.0</shiro-spring>
        <!-- 视图层，在springboot工程中二者缺一不可，因为springboot默认依赖thymeleaf2.0 -->
        <thymeleaf.version>3.0.9.RELEASE</thymeleaf.version><!-- thymeleaf版本 -->
        <thymeleaf-layout-dialect.version>2.0.0</thymeleaf-layout-dialect.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- springboot&springcloud -->
            <!--注：这几个依赖必须写在<dependencyManagement>中，下面的springboot&springcloud依赖才可以不用写版本号-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Dalston.SR1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.5.9.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--
        依赖放置顺序：
        1.我的工具项目
        2.spring
        3.spring-boot
        4.其他框架集成spring
        5.其他主要框架
        6.其他小型框架
        7.测试框架
        8.某些对开发没有直观影响的插件，如热部署、lombok等
        如果某些框架需要同时引入自身框架的依赖以及集成spring或springboot的依赖，那么放置顺序不考虑spring以及spirngboot的顺序，
        可以观察我引入的thymeleaf，虽然其中有springboot相关框架的依赖但是我却放在了很下面。按ctrl f，输入start thymeleaf查询。
    -->
    <!-- 此pom.xml配置未引入slf4j框架的依赖。但是实际上其中很多项目都已经依赖了slf4j，所以该项目可以直接使用。 -->
    <dependencies>
        <dependency>
            <groupId>io.github.yan624</groupId>
            <artifactId>yan-common</artifactId>
            <version>LianQi.L1</version>
        </dependency>
        <dependency>
            <groupId>io.github.yan624</groupId>
            <artifactId>yan-utils</artifactId>
            <version>LianQi.L1</version>
        </dependency>

        <!-- 为了使用@ConfigurationProperties注解，必须加入这个-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!--@RestController在里面-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-validator</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--springboot启动类必须要使用这个依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!-- 权限控制 -->
        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>${shiro-spring}</version>
        </dependency>

        <!-- start thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>nz.net.ultraq.thymeleaf</groupId>
                    <artifactId>thymeleaf-layout-dialect</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.thymeleaf</groupId>
                    <artifactId>thymeleaf-spring4</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 -->
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring4</artifactId>
            <version>${thymeleaf.version}</version>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf</artifactId>
            <version>${thymeleaf.version}</version>
        </dependency>
        <dependency>
            <groupId>nz.net.ultraq.thymeleaf</groupId>
            <artifactId>thymeleaf-layout-dialect</artifactId>
            <version>${thymeleaf-layout-dialect.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.thymeleaf</groupId>
                    <artifactId>thymeleaf</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- end thymeleaf -->

        <!--用于测试-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <exclusions>
                <!--
                    这个jar包里面有一个依赖是org.json，但是这个json是android的，所以会有一点冲突
                    2019.03.27更新：貌似没多大关系，但是以前会出问题，所以这个exclusion继续留着。
                    另外在spring-boot-configuration-processor中已经引入该依赖，所以去除也没什么不对。
                -->
                <exclusion>
                    <groupId>org.skyscreamer</groupId>
                    <artifactId>jsonassert</artifactId>
                </exclusion>
            </exclusions>
            <scope>test</scope>
        </dependency>

        <!-- start plugin-->
        <!-- 修改后立即生效，热部署 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>springloaded</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>
        <!--小辣椒插件，自动生成get/set/log等一系列便捷方法-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!-- end plugin-->
    </dependencies>

    <build>
        <finalName>simple project</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!-- 打jar包必需的配置 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 指定该Main Class为全局的唯一入口 -->
                    <mainClass>io.github.yan624.simpleproject.YanSimpleProjectApplication</mainClass>
                    <layout>JAR</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中-->
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
